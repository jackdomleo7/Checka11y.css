/*! Checka11y.css v1.0.0-beta.0 | MIT License | github.com/jackdomleo7/Checka11y.css */

/**
 * Checka11y.css customisation
 */

:root {
  --checka11y-error-color: #f00;
  --checka11y-error-border-width: 5px;
  
  /** 
    * Colors
    * Colors are broken down into RGB and A variables to be combined for the main color
    */

  --text-error: #721c24;
  --bg-error: #ffc6c6;
  --border-error: #ff0000;

  --text-warn: #721c24;
  --bg-warn: #ffffd8;
  --border-warn:#ffff66;

  /* Scale */
  --space: 0.25rem;

  --space-0: calc(var(--space) * 0);
  --space-2: calc(var(--space) * 2);
  --space-4: calc(var(--space) * 4);
  --space-6: calc(var(--space) * 6);
}

/**
  * Base Classes
  * To use in SCSS with the @extend command.
  */
.alert {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 2rem;
  font-size: 1.2rem;
}

.alert.error {
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.5rem solid var(--border-error);
}

.alert.warn {
  color: var(--text-warn);
  background-color: var(--bg-warn);
  border: 0.5rem solid var(--border-warn);
}

.content.error {
  border-radius: 0.75rem;
  border: 0.4rem solid var(--border-error);
  background-color: var(--bg-error);
}

.content.warn {
  border-radius: 0.75rem;
  border: 0.4rem solid var(--border-warn);
  background-color: var(--bg-warn);
}

/**
* HTML
*/

/* html element requires a lang attribute */
html:not( [lang] ) body::before {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 0.75rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.4rem solid var(--border-error);
  content: "ERROR: html has no lang attribute." !important;
}

html[lang = ""] body {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

html[lang = ""] body::before {
  content: "ERROR: html lang attribute should not be empty" !important;
  font-family: var(--checka11y-font, cursive);
}

/**
 * Images
 */

/* All images require an alt attribute, whether it has a value or is null */
img:not( [alt] ) {
  border-radius: 0.75rem;
  border: 0.4rem solid var(--border-error);
  background-color: var(--bg-error);
}

/**
 * iframe
 */

/* All iframe must have title attribute */
iframe:not( [title] ) {
  border-radius: 0.75rem;
  border: 0.4rem solid var(--border-error);
  background-color: var(--bg-error);
}

/* All iframe must have title attribute */
iframe:not( [title] )::after {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 0.75rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.4rem solid var(--border-error);
  content: "ERROR: iframe has no title attribute. " !important;
}

/**
 * Lists
 */

/* All children of <ul> and <ol> must only be <li> */
ol > *:not( li )::after,
ul > *:not( li )::after {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 0.75rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.4rem solid var(--border-error);
  content: "ERROR: List markup invalid. Ensure <li> is the only direct child of <ul> or <ol>." !important;
}

/* All children of <dl> must only be <dt> or <dd> */
dl > *:not( dt ):not( dd )::after {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-4);
  border-radius: 0.75rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.4rem solid var(--border-error);
  content: "ERROR: List markup invalid. Ensure that the only direct children of <dl> are <dt> and <dd>." !important;
}

/**
 * Navigation
 */

/* If more than one primary navigation is available, all navigations must be clearly labelled. */
nav:not( [aria-label] ):not( [aria-labelledby] ) ~ nav::after,
nav ~ nav:not( [aria-label] ):not( [aria-labelledby] )::after {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 0.75rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.4rem solid var(--border-error);
  content: "ERROR: <nav> indicates the primary navigation for the page. In cases where multiple primary navigations exist, an aria-label or aria-labelledby attribute must be present on both <nav> tags" !important;
}

/**
 * Links
 */

/* Warn when opening a link in a new tab or window */
a[target = "_blank"]::after {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 0.75rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.4rem solid var(--border-error);
  content: " WARNING: Links that open in a new tab or window should be communicated to the user, ensure the user knows of this behavior" !important;
}

/**
* Invalid HTML nested inside <a>
*/

a audio[controls] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a audio[controls]::after {
  content: "ERROR: Ensure that <audio> with controls attribute is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a button {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a button::after {
  content: "ERROR: Ensure that <button> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a details {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a details::after {
  content: "ERROR: Ensure that <details> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a embed {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a embed::after {
  content: "ERROR: Ensure that <embed> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a iframe {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a iframe::after {
  content: "ERROR: Ensure that <iframe> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a img[usemap] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a img[usemap]::after {
  content: "ERROR: Ensure that <img> with usemap attribute is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a input:not( [type = "hidden"] ) {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a input:not( [type = "hidden"] )::after {
  content: "ERROR: Ensure that <input> without type=hidden attribute attribute is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a label {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a label::after {
  content: "ERROR: Ensure that <label> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a object[usemap] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a object[usemap]::after {
  content: "ERROR: Ensure that <object> with usemap attribute is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a select {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a select::after {
  content: "ERROR: Ensure that <select> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a textarea {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a textarea::after {
  content: "ERROR: Ensure that <textarea> is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

a video[controls] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

a video[controls]::after {
  content: "ERROR: Ensure that <video> with controls attribute is not a child of <a> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

/**
 * Buttons
 */

/**
* Invalid HTML (interactive content) nested inside of <button>
*/

button a[href] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button a[href]::after {
  content: "ERROR: Ensure that <a> with href attribute is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button audio[controls] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button audio[controls]::after {
  content: "ERROR: Ensure that <audio> with controls attribute is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button button {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button button::after {
  content: "ERROR: Ensure that <button> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button details {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button details::after {
  content: "ERROR: Ensure that <details> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button embed {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button embed::after {
  content: "ERROR: Ensure that <embed> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button iframe {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button iframe::after {
  content: "ERROR: Ensure that <iframe> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button img[usemap] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button img[usemap]::after {
  content: "ERROR: Ensure that <img> with usemap attribute is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button input:not( [type = "hidden"] ) {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button input:not( [type = "hidden"] )::after {
  content: "ERROR: Ensure that <input> without type=hidden attribute is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button label {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button label::after {
  content: "ERROR: Ensure that <label> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button object[usemap] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button object[usemap]::after {
  content: "ERROR: Ensure that <object> with usemap attribute is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button select {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button select::after {
  content: "ERROR: Ensure that <select> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button textarea {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button textarea::after {
  content: "ERROR: Ensure that <textarea> is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

button video[controls] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

button video[controls]::after {
  content: "ERROR: Ensure that <video> with controls attribute is not a child of <button> as it is an invalid HTML" !important;
  font-family: var(--checka11y-font, cursive);
}

/**
* The dir attribute can only have the values, ltr, rtl and auto.
*/

[dir]:not( [dir="rtl"] ):not( [dir="ltr"] ):not( [dir="auto"] ) {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

[dir]:not( [dir="rtl"] ):not( [dir="ltr"] ):not( [dir="auto"] )::after {
  content: "ERROR: The dir attribute can only have the values, ltr, rtl and auto." !important;
  font-family: var(--checka11y-font, cursive);
}

/*Ensure that the tab index of commonly tabbed to elements is not -1*/

a[href][tabindex="-1"],
area[href][tabindex="-1"],
input:not([disabled])[tabindex="-1"],
select:not([disabled])[tabindex="-1"],
textarea:not([disabled])[tabindex="-1"],
button:not([disabled])[tabindex="-1"],
iframe[tabindex="-1"],
[contentEditable="true"][tabindex="-1"] {
  border: var(--checka11y-error-border-width, 5px) solid
    var(--checka11y-error-color, red) !important;
}

a[href][tabindex="-1"]::after {
  content: "ERROR : Ensure that <a> with an href attribute doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

area[href][tabindex="-1"]::after {
  content: "ERROR : Ensure that <area> with an href attribute doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

input:not([disabled])[tabindex="-1"]::after {
  content: "ERROR : Ensure that <input> that is not disabled doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

select:not([disabled])[tabindex="-1"]::after {
  content: "ERROR : Ensure that <select> that is not disabled doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

textarea:not([disabled])[tabindex="-1"]::after {
  content: "ERROR : Ensure that <textarea> that is not disabled doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

button:not([disabled])[tabindex="-1"]::after {
  content: "ERROR : Ensure that <button> that is not disabled doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

iframe[tabindex="-1"]::after {
  content: "ERROR : Ensure that <iframe> doesn't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}

[contentEditable="true"][tabindex="-1"]::after {
  content: "ERROR : Ensure that HTML elements with editable content don't have a tab index of -1" !important;
  font-family: var(--checka11y-font, cursive);
}
/**
* Video/audio with autoplay set
*/

[autoplay] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

/**
* Headings should have (meaningful) content
*/
h1:empty,
h2:empty,
h3:empty,
h4:empty,
h5:empty,
h6:empty {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

h1:empty::after,
h2:empty::after,
h3:empty::after,
h4:empty::after,
h5:empty::after,
h6:empty::after {
  content: "ERROR: headings must not be empty" !important;
  font-family: var(--checka11y-font, cursive);
}

/**
* Headings should be reachable by assistive technologies
*/
h1[aria-hidden],
h2[aria-hidden],
h3[aria-hidden],
h4[aria-hidden],
h5[aria-hidden],
h6[aria-hidden] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

h1[aria-hidden]::after,
h2[aria-hidden]::after,
h3[aria-hidden]::after,
h4[aria-hidden]::after,
h5[aria-hidden]::after,
h6[aria-hidden]::after {
  content: "ERROR: headings should be reachable by assistive technologies (no aria-hidden)" !important;
  font-family: var(--checka11y-font, cursive);
}

/**
* Inline styles with !important should be avoided to allow end-users to had their custom stylesheet
*/
[style*="!important"] {
  border: var(--checka11y-error-border-width, 5px) solid var(--checka11y-error-color, red) !important;
}

[style*="!important"]::after {
  content: "WARNING: !important should be avoided in the inline styles" !important;
  font-family: var(--checka11y-font, cursive);
}
